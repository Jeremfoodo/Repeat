import streamlit as st
import pandas as pd
import numpy as np
import gdown
from datetime import datetime, timedelta

# TÃ©lÃ©chargement et chargement des donnÃ©es
@st.cache_data
def load_data():
    prepared_data_url = 'https://drive.google.com/uc?id=1krOrcWcYr2F_shA4gUYZ1AQFsuWja9dM'
    gdown.download(prepared_data_url, 'prepared_data.csv', quiet=False)
    df = pd.read_csv('prepared_data.csv')
    df['Date de commande'] = pd.to_datetime(df['Date de commande'])
    df['date 1ere commande (Restaurant)'] = pd.to_datetime(df['date 1ere commande (Restaurant)'])
    return df

# Fonction de catÃ©gorisation des clients par niveau de dÃ©pense
def categorize_customer(spent):
    if spent <= 500:
        return 'Basic'
    elif 500 < spent <= 1500:
        return 'Silver'
    elif 1500 < spent <= 2000:
        return 'Gold'
    else:
        return 'High Spenders'

# Fonction pour obtenir la catÃ©gorie des clients
def get_customer_category(first_order_date, current_month):
    if first_order_date >= current_month:
        return 'Acquisition'
    elif first_order_date >= current_month - pd.DateOffset(months=1):
        return 'Nouveau'
    elif first_order_date >= current_month - pd.DateOffset(months=5):
        return 'RÃ©cent'
    else:
        return 'Ancien'

# Fonction principale pour crÃ©er le dataframe des clients avec les informations nÃ©cessaires
@st.cache_data
def create_customer_dataframe(df):
    # Calcul des dates de mois en cours et prÃ©cÃ©dent
    today = datetime.today()
    current_month = today.replace(day=1)
    previous_month = (current_month - timedelta(days=1)).replace(day=1)
    
    # Initialisation des colonnes de rÃ©sultat
    result = []

    for restaurant_id, group in df.groupby('Restaurant ID'):
        account_manager = group.loc[group['Date de commande'].idxmax()]['Owner email']
        total_current_month = group[group['Date de commande'].dt.to_period('M') == current_month.to_period('M')]['Total'].sum()
        total_previous_month = group[group['Date de commande'].dt.to_period('M') == previous_month.to_period('M')]['Total'].sum()
        
        spending_level_current = categorize_customer(total_current_month)
        spending_level_previous = categorize_customer(total_previous_month)
        
        first_order_date = group['date 1ere commande (Restaurant)'].min()
        customer_category = get_customer_category(first_order_date, current_month)
        
        result.append({
            'Restaurant ID': restaurant_id,
            'Owner email': account_manager,
            'Total Current Month': total_current_month,
            'Total Previous Month': total_previous_month,
            'Spending Level Current': spending_level_current,
            'Spending Level Previous': spending_level_previous,
            'Customer Category': customer_category
        })
    
    result_df = pd.DataFrame(result)
    return result_df

# Charger les donnÃ©es et crÃ©er le dataframe des clients
df = load_data()
customer_df = create_customer_dataframe(df)

def segmentation_page(df, customer_df):
    st.title('Segmentation')

    # SÃ©lectionner le pays
    selected_country = st.selectbox('SÃ©lectionner un pays', ['Tous les pays', 'FR', 'US', 'GB', 'BE'])
    if selected_country != 'Tous les pays':
        df = df[df['Pays'] == selected_country]

    # SÃ©lectionner l'account manager
    account_manager = st.selectbox('SÃ©lectionner un account manager', customer_df['Owner email'].unique())
    df_account = customer_df[customer_df['Owner email'] == account_manager]

    # Clients inactifs
    inactive_clients = df_account[(df_account['Total Previous Month'] > 0) & (df_account['Total Current Month'] == 0)]

    # Clients downgraded
    downgraded_clients = df_account[(df_account['Spending Level Previous'] > df_account['Spending Level Current'])]

    # Clients same tier less spending
    same_tier_less_spending_clients = df_account[
        (df_account['Spending Level Previous'] == df_account['Spending Level Current']) & 
        (df_account['Total Previous Month'] > df_account['Total Current Month'])
    ]

    # Clients increased spending
    increased_spending_clients = df_account[df_account['Total Current Month'] > df_account['Total Previous Month']]

    # RÃ©capitulatif
    inactive_count = inactive_clients.shape[0]
    downgraded_count = downgraded_clients.shape[0]
    same_tier_less_spending_count = same_tier_less_spending_clients.shape[0]
    increased_spending_count = increased_spending_clients.shape[0]

    st.markdown(f"""
    <div style='background-color: #f8f9fa; padding: 10px; border-radius: 5px;'>
        <h4>Recap : oÃ¹ sont vos clients en {current_month.strftime("%B %Y")}</h4>
        <p><span style='color: #dc3545;'>Rouge</span> : clients qui n'ont pas fait de repeat vs {previous_month.strftime("%B %Y")}</p>
        <p><span style='color: #fd7e14;'>Orange</span> : clients qui ont baissÃ© de catÃ©gorie de dÃ©pense vs {previous_month.strftime("%B %Y")}</p>
        <p><span style='color: #ffc107;'>Jaune</span> : clients qui ont gardÃ© la catÃ©gorie de dÃ©pense mais dÃ©pensÃ© moins depuis {previous_month.strftime("%B %Y")}</p>
        <p><span style='color: #28a745;'>Vert</span> : clients en augmentation de dÃ©pense.</p>
        <div style='display: flex; justify-content: space-around;'>
            <div style='background-color: #f8d7da; padding: 10px; border-radius: 5px; text-align: center;'>
                <strong style='color: #000000;'>{inactive_count}</strong>
                <p>Inactifs en {current_month.strftime("%B %Y")}</p>
            </div>
            <div style='background-color: #fd7e14; padding: 10px; border-radius: 5px; text-align: center;'>
                <strong style='color: #000000;'>{downgraded_count}</strong>
                <p>BaissÃ© de catÃ©gorie</p>
            </div>
            <div style='background-color: #ffebcc; padding: 10px; border-radius: 5px; text-align: center;'>
                <strong style='color: #000000;'>{same_tier_less_spending_count}</strong>
                <p>DÃ©pensÃ© moins</p>
            </div>
            <div style='background-color: #d4edda; padding: 10px; border-radius: 5px; text-align: center;'>
                <strong style='color: #000000;'>{increased_spending_count}</strong>
                <p>Augmentation de dÃ©pense</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Afficher les tables de clients
    def render_clients_table(clients, title):
        st.markdown(f"### {title}")
        st.dataframe(clients[['Restaurant ID', 'Owner email', 'Spending Level Previous', 'Spending Level Current', 'Total Previous Month', 'Total Current Month', 'Customer Category']])

    # Box rouge pour les clients inactifs en juillet
    st.markdown("<div style='background-color: #f8d7da; padding: 10px; border-radius: 5px;'>", unsafe_allow_html=True)
    st.subheader(f"ğŸ”´ Clients actifs en {previous_month.strftime('%B %Y')} mais inactifs en {current_month.strftime('%B %Y')} ({inactive_count})")
    st.markdown("<small>Ces clients n'ont pas refait d'achat en juillet, essayer un repeat ou comprendre les raisons du churn.</small>", unsafe_allow_html=True)
    render_clients_table(inactive_clients, f"Clients inactifs en {current_month.strftime('%B %Y')}")
    st.download_button(
        label=f'TÃ©lÃ©charger la liste des clients inactifs en {current_month.strftime("%B %Y")}',
        data=inactive_clients.to_csv(index=False),
        file_name=f'clients_inactifs_{current_month.strftime("%B_%Y")}.csv',
        mime='text/csv'
    )
    st.markdown("</div>", unsafe_allow_html=True)

    # Clients qui ont baissÃ© dans le tiering
    st.markdown("<div style='background-color: #fd7e14; padding: 10px; border-radius: 5px;'>", unsafe_allow_html=True)
    st.subheader(f"ğŸŸ  Clients actifs en {current_month.strftime('%B %Y')} mais qui ont baissÃ© dans le tiering ({downgraded_count})")
    st.markdown("<small>Ces clients ont baissÃ© de catÃ©gorie de dÃ©pense, normalement ils peuvent acheter davantage, vÃ©rifiez qu'ils ont bien fait leur commande et si non faites un repeat. Si oui, vÃ©rifiez qu'ils ont bien achetÃ© suffisamment et proposez un upsell.</small>", unsafe_allow_html=True)
    render_clients_table(downgraded_clients, "Clients qui ont baissÃ© dans le tiering")
    st.download_button(
        label=f'TÃ©lÃ©charger la liste des clients qui ont baissÃ© dans le tiering',
        data=downgraded_clients.to_csv(index=False),
        file_name=f'clients_baisse_tiering_{current_month.strftime("%B_%Y")}.csv',
        mime='text/csv'
    )
    st.markdown("</div>", unsafe_allow_html=True)

    # Clients restÃ©s dans le mÃªme tiering mais dÃ©pensÃ© moins en juillet
    st.markdown("<div style='background-color: #ffebcc; padding: 10px; border-radius: 5px;'>", unsafe_allow_html=True)
    st.subheader(f"ğŸŸ¡ Clients restÃ©s dans le mÃªme tiering mais dÃ©pensÃ© moins en {current_month.strftime('%B %Y')} ({same_tier_less_spending_count})")
    st.markdown("<small>Ces clients ont dÃ©pensÃ© un peu moins en juillet, mÃªme s'ils sont restÃ©s dans le mÃªme segment. Vous pouvez sans doute voir s'ils peuvent racheter un peu plus.</small>", unsafe_allow_html=True)
    render_clients_table(same_tier_less_spending_clients, "Clients restÃ©s dans le mÃªme tiering mais dÃ©pensÃ© moins en juillet")
    st.download_button(
        label=f'TÃ©lÃ©charger la liste des clients restÃ©s dans le mÃªme tiering mais dÃ©pensÃ© moins en {current_month.strftime("%B %Y")}',
        data=same_tier_less_spending_clients.to_csv(index=False),
        file_name=f'clients_meme_tiering_depense_moins_{current_month.strftime("%B_%Y")}.csv',
        mime='text/csv'
    )
    st.markdown("</div>", unsafe_allow_html=True)

    # Clients restÃ©s dans le mÃªme tiering mais dÃ©pensÃ© plus en juillet
    st.markdown("<div style='background-color: #d4edda; padding: 10px; border-radius: 5px;'>", unsafe_allow_html=True)
    st.subheader(f"ğŸŸ¢ Clients qui ont augmentÃ© leurs dÃ©penses, bravo ! ({increased_spending_count})")
    render_clients_table(increased_spending_clients, "Clients qui ont augmentÃ© leurs dÃ©penses")
    st.download_button(
        label=f'TÃ©lÃ©charger la liste des clients restÃ©s dans le mÃªme tiering mais dÃ©pensÃ© plus en {current_month.strftime("%B %Y")}',
        data=increased_spending_clients.to_csv(index=False),
        file_name=f'clients_meme_tiering_depense_plus_{current_month.strftime("%B_%Y")}.csv',
        mime='text/csv'
    )
    st.markdown("</div>", unsafe_allow_html=True)

if __name__ == "__main__":
    # Charger les donnÃ©es et afficher la page de segmentation
    segmentation_page(df, customer_df)
